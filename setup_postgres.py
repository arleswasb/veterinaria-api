#!/usr/bin/env python3
"""
Script para configurar e testar conex√£o com PostgreSQL.
Inclui rotina para tentar adicionar o PostgreSQL ao PATH do usu√°rio no Windows.
"""

import subprocess
import sys
import os
import platform  # Importado para l√≥gicas espec√≠ficas de S.O.
from sqlalchemy import create_engine, text
# Supondo que voc√™ tenha um arquivo config.py como nos exemplos anteriores
# from config import settings 

# --- Bloco de Fun√ß√µes de Automa√ß√£o ---

def try_to_fix_windows_path():
    """
    Tenta encontrar a instala√ß√£o do PostgreSQL no Windows e adicion√°-la
    ao PATH do usu√°rio via PowerShell. Retorna True se fizer uma altera√ß√£o.
    """
    if platform.system() != "Windows":
        return False # Esta fun√ß√£o √© apenas para Windows

    print("‚ìò  Tentando encontrar e adicionar o PostgreSQL ao PATH do usu√°rio...")

    # Script PowerShell para encontrar o caminho do servi√ßo e adicionar ao PATH do usu√°rio
    powershell_script = r"""
        # Encontra o caminho do execut√°vel do servi√ßo PostgreSQL
        $servicePath = (Get-WmiObject -Class Win32_Service -Filter "Name LIKE 'postgresql%'").PathName
        if (-not $servicePath) {
            Write-Output "FAIL: Servi√ßo PostgreSQL n√£o encontrado."
            exit 1
        }

        # Extrai apenas o diret√≥rio 'bin' do caminho completo
        $postgresBinPath = [System.IO.Path]::GetDirectoryName($servicePath.Split('"')[1])

        if (-not (Test-Path $postgresBinPath)) {
             Write-Output "FAIL: Diret√≥rio bin n√£o encontrado."
             exit 1
        }
        
        # Obt√©m o PATH atual do usu√°rio
        $currentUserPath = [System.Environment]::GetEnvironmentVariable("Path", "User")

        # Verifica se o caminho j√° existe no PATH
        if ($currentUserPath -like "*$postgresBinPath*") {
            Write-Output "EXISTS: O caminho j√° est√° no PATH do usu√°rio."
            exit 0
        }

        # Adiciona o novo caminho, garantindo que n√£o haja ponto e v√≠rgula no final
        $newPath = $currentUserPath.TrimEnd(';') + ";" + $postgresBinPath
        [System.Environment]::SetEnvironmentVariable("Path", $newPath, "User")
        
        Write-Output "SUCCESS: O caminho foi adicionado ao PATH do usu√°rio."
        exit 0
    """

    try:
        result = subprocess.run(
            ['powershell', '-NoProfile', '-Command', powershell_script],
            capture_output=True, text=True, check=True
        )
        output = result.stdout.strip()

        if "SUCCESS" in output:
            print(f"‚úÖ Sucesso! O caminho '{output.split(':')[-1].strip()}' foi adicionado.")
            return True # Indicamos que uma mudan√ßa foi feita
        elif "EXISTS" in output:
            print("üëç O caminho do PostgreSQL j√° estava no seu PATH. Nenhuma a√ß√£o necess√°ria.")
            return False # Nenhuma mudan√ßa foi feita
        else:
            print(f"‚ùå A automa√ß√£o falhou em encontrar o caminho. Sa√≠da: {output}")
            return False
            
    except (subprocess.CalledProcessError, FileNotFoundError) as e:
        print(f"‚ùå Falha ao executar o script PowerShell de automa√ß√£o: {e}")
        if hasattr(e, 'stderr') and e.stderr:
            print(f"   Detalhes do erro: {e.stderr}")
        return False

# --- Bloco de Fun√ß√µes do Script Original ---

def check_postgresql_installation():
    """Verifica se o PostgreSQL est√° instalado e no PATH."""
    try:
        # Usamos 'psql -V' que √© mais padr√£o que '--version'
        result = subprocess.run(['psql', '-V'], capture_output=True, text=True, check=True)
        print(f"‚úÖ PostgreSQL encontrado: {result.stdout.strip()}")
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå PostgreSQL n√£o est√° instalado ou n√£o est√° no PATH")
        return False

def install_postgresql_windows():
    # ... (Sua fun√ß√£o original de instru√ß√µes manuais)
    pass

def create_database():
    # ... (Sua fun√ß√£o original)
    pass

def test_connection():
    # ... (Sua fun√ß√£o original)
    pass


# --- Fun√ß√£o Principal Modificada ---

def setup_postgresql():
    """Processo completo de configura√ß√£o do PostgreSQL com automa√ß√£o de PATH."""
    print("üêò Configura√ß√£o PostgreSQL para API Veterin√°ria\n")
    
    # 1. Verificar instala√ß√£o
    if not check_postgresql_installation():
        # Se a verifica√ß√£o falhar, tenta corrigir o PATH automaticamente
        if try_to_fix_windows_path():
            # Se a corre√ß√£o foi aplicada, avisa o usu√°rio e interrompe
            print("\n‚ÄºÔ∏è A√á√ÉO NECESS√ÅRIA ‚ÄºÔ∏è")
            print("O PATH do sistema foi modificado para incluir o PostgreSQL.")
            print("Para que a mudan√ßa tenha efeito, voc√™ PRECISA FECHAR este terminal e ABRIR UM NOVO.")
            print("\nDepois de reiniciar o terminal, execute este script novamente.")
            sys.exit() # Encerra o script para for√ßar o rein√≠cio do terminal
        else:
            # Se a automa√ß√£o falhou ou n√£o era necess√°ria, mostra instru√ß√µes manuais
            print("\n‚ö†Ô∏è Automa√ß√£o n√£o p√¥de resolver o problema. Por favor, configure o PATH manualmente.")
            install_postgresql_windows()
            sys.exit(1) # Encerra com erro

    # ... (o resto do seu script continua aqui)
    print("\n‚úÖ PostgreSQL configurado e pronto para uso!")
    return True


if __name__ == "__main__":
    setup_postgresql()