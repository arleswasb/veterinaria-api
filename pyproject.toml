[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "veterinaria-api"
version = "2.0.0"
description = "API de Gerenciamento de Clínicas Veterinárias"
authors = [
    {name = "Veterinaria API Team", email = "dev@veterinaria-api.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]

dependencies = [
    "fastapi>=0.116.0",
    "uvicorn[standard]>=0.35.0",
    "sqlalchemy>=2.0.41",
    "psycopg2-binary>=2.9.10",
    "pydantic>=2.11.7",
    "pydantic-settings>=2.10.1",
    "email-validator>=2.2.0",
    "python-jose[cryptography]>=3.5.0",
    "passlib[bcrypt]>=1.7.4",
    "bcrypt>=4.3.0",
    "python-multipart>=0.0.20",
    "python-dotenv>=1.1.1",
    "requests>=2.32.3",
]

[project.optional-dependencies]
dev = [
    "black>=24.12.0",
    "flake8>=7.1.1",
    "mypy>=1.14.1",
    "pytest>=8.3.4",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "httpx>=0.28.1",
    "pre-commit>=4.0.1",
    "safety>=3.3.1",
    "bandit>=1.8.0",
    "isort>=5.13.2",
]

prod = [
    "gunicorn>=23.0.0",
    "sentry-sdk[fastapi]>=2.21.0",
]

[project.urls]
Homepage = "https://github.com/arleswasb/veterinaria-api"
Documentation = "https://github.com/arleswasb/veterinaria-api#readme"
Repository = "https://github.com/arleswasb/veterinaria-api"
Issues = "https://github.com/arleswasb/veterinaria-api/issues"

# Configuração do Black
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Configuração do isort
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["api", "models", "services", "crud", "schemas"]

# Configuração do mypy
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "uvicorn.*",
    "passlib.*",
    "jose.*",
    "psycopg2.*",
]
ignore_missing_imports = true

# Configuração do pytest
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
]
markers = [
    "slow: marca testes como lentos",
    "integration: marca testes de integração", 
    "unit: marca testes unitários",
    "auth: marca testes de autenticação",
]

# Configuração do coverage
[tool.coverage.run]
source = ["."]
omit = [
    "*/venv/*",
    "*/tests/*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/node_modules/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class .*\\(Protocol\\):",
    "@(abc\\.)?abstractmethod",
]
